#!/bin/bash -eu

ORCA_PREFIX=orca
ORCA_INCUS_PRESEED="
networks:
- name: orcabr0
  type: bridge
  config:
    ipv4.address: SUBNET
    ipv4.nat: false
    ipv6.address: none
profiles:
- name: default
  config:
    limits.memory: 2GB
  devices:
    root:
      path: /
      pool: data
      type: disk
"

cd "$(dirname "$0")"
base="$(pwd)"

## orca library functions ##
orca_log() {
    echo -n "$(date +'%Y-%m-%d %H:%M:%S') "
    echo "$@" >&2
}

orcabort() {
    orca_log "[!] $@"
    exit 1
}

orca_incus_wait_ready() {
    orca_log "[-] Waiting for network: $1"
    local gateway=$(incus network get orcabr0 ipv4.address | sed -e 's,/.*$,,')
    local waitscript="while [[ ! -e /etc/resolv.conf || ! -e /home/ubuntu ]] || ! ping -c1 $gateway &>/dev/null; do sleep 0.1; done"
    incus exec "$1" -- bash -c "$waitscript"
    # wait for dbus
    incus exec "$1" -- bash -c "while ! pgrep dbus-daemon &>/dev/null; do sleep 0.1; done"
}

orca_incus_exists() { incus config show "$1" &>/dev/null; }

orca_incus_clone() {
    local src="$1"
    local dst="$2"
    if [[ "$src" = "$dst" ]]; then
        orcabort "Service depends on itself ($src)"
    fi
    # if this is a remote image e.g. images:ubuntu/noble/cloud
    # then do a default init instead of a copy
    if echo "$src" | grep ':' &>/dev/null; then
        if orca_incus_exists "$dst"; then
            orca_log "[+] Deleting old $dst"
            incus delete --force "$dst"
        fi
        incus create "$src" "$dst"
        incus network attach orcabr0 "$dst" eth0
    else
        local src_vm="$ORCA_PREFIX-$(echo "$src" | sed -e 's,@,--,' | tr '.' '-')"
        if ! orca_incus_exists "$src_vm"; then
            orca_log "[+] Building $src"
            orca_cmd_template "$src"
            orca_log "[-] Build finished"
        fi
        if orca_incus_exists "$dst"; then
            orca_log "[+] Deleting old $dst"
            incus delete --force "$dst"
        fi
        orca_log "[+] Cloning $src_vm -> $dst"
        incus copy "$src_vm" "$dst"
    fi
}

# source the service file and set global variables
orca_source() {
    # Make subnet available to service
    # for example, orca_subnet="172.27.0"
    orca_subnet=$(incus network get orcabr0 ipv4.address | cut -d. -f1-3)
    unset service_{build,prep,setup,deploy,refresh}
    if [[ -e "$1" ]]; then
        . "$1"
    fi
}

# source the service's bundle
orca_service_parse() {
    orca_name="$1"
    orca_suffix=
    if echo "$orca_name" | grep '@' &>/dev/null; then
        orca_suffix=$(echo "$orca_name" | cut -d@ -f2)
        orca_name=$(echo "$orca_name" | cut -d@ -f1)
        vm_name="$ORCA_PREFIX-$orca_name--$(echo "$orca_suffix" | tr '.' '-')"
    else
        vm_name="$ORCA_PREFIX-$orca_name"
    fi
    svc="service/$orca_name"
    if [[ ! -d "$svc" ]]; then
        orcabort "$svc not found"
    fi
    service_base=base-ubuntu@24.04
    orca_source "$svc/service"
    if [[ "$(type -t service_base)" = function ]]; then
        service_base=$(service_base "$vm_name" "$orca_suffix")
    fi
}

# push a tarball into a container
#   args (container bundle)
orca_push_bundle() {(
    local container="$1"
    local bundle="$2"
    shift 2
    [[ ! -d "$bundle" ]] && orcabort "bundle $bundle not found."
    local tmpdir=$(mktemp -d 2>/dev/null || mktemp -d -t 'bundle')
    tgz="$tmpdir/$ORCA_PREFIX-bundle.tar.gz"

    orca_log "[ ] Pushing $bundle -> $container"
    rm -f "$tgz"
    tar --exclude .git --exclude ./service -C "$bundle" -czf "$tgz" . || exit 1
    incus file push "$tgz" "${container}/tmp/$ORCA_PREFIX-bundle.tar.gz" || exit 1
    incus exec "$container" -- tar --no-overwrite-dir -C / -xzf /tmp/$ORCA_PREFIX-bundle.tar.gz || exit 1

    orca_source "$bundle/service"
    if [[ "$(type -t service_setup)" = function ]]; then
        incus file push "${bundle}/service" "${container}/tmp/$ORCA_PREFIX-service" || exit 1
        local bundle_exec="set -ex; cd /tmp; . $ORCA_PREFIX-service; rm -f $ORCA_PREFIX-service $ORCA_PREFIX-bundle.tar.gz; service_setup '$container' '$orca_suffix' || exit 1"
        incus exec "$container" "$@" -- bash -c "$bundle_exec" || {
            rm -rf "$tgz" "$tmpdir"
            exit 1
        }
    fi
    rm -rf "$tgz" "$tmpdir"
)}

orca_usage() {
    echo "orca init [SUBNET]"
    echo "     initialize Incus"
    echo "     set subnet to SUBNET, defaulting to 172.27.0.1/24"
    echo

    echo "orca build SERVICE [SERVICE ...]"
    echo '   - builds the Incus box "'"$ORCA_PREFIX"'-$NAME-build"'
    echo '     using the files in service/$NAME'
    echo '     and the functions in service/$NAME/service'
    echo

    echo "orca deploy SERVICE [SERVICE ...]"
    echo '   - builds SERVICE'
    echo '   - renames '"$ORCA_PREFIX"'-$NAME-build to '"$ORCA_PREFIX"'-$NAME'
    echo '   - runs deploy script'
    echo

    echo "orca refresh SERVICE [SERVICE ...]"
    echo '   - copies the files from service/$NAME/ to the running box named '"$ORCA_PREFIX"'-$NAME'
    echo '   - runs service_refresh, default implementation just restarts the box.'
    echo
}

## orca commands ##
orca_cmd_build() {(
    orca_service_parse "$1"
    local vm_build="${vm_name}-build"

    if [[ "$(type -t service_build)" = function ]]; then
        orca_log "[+] Running $svc build()"
        service_build "$vm_build" "$orca_suffix" || orcabort "custom build failed"
    else
        orca_incus_clone "$service_base" "$vm_build" || orcabort "clone failed"
    fi
    cd "$base"
    orca_log "[+] Starting $vm_build"
    incus start "$vm_build" || orcabort "incus start failed"
    orca_incus_wait_ready "$vm_build"
    # add vm name(s) to /etc/hosts so sudo doesn't lag
    incus exec "$vm_build" -- bash -c "echo 127.0.0.1 $vm_name $vm_build >> /etc/hosts"

    if [[ "$(type -t service_prep)" = function ]]; then
        orca_log "[+] Running $svc prep()"
        cd "$base/$svc"
        service_prep "$vm_build" "$orca_suffix"
        cd "$base"
    fi

    orca_log "[+] Pushing $svc bundle"
    orca_push_bundle "$vm_build" "$svc" || orcabort "push-bundle failed"

    orca_log "[+] Enabling apt-daily"
    incus exec "$vm_build" systemctl unmask apt-daily.timer
    incus exec "$vm_build" systemctl unmask apt-daily-upgrade.timer

    orca_log "[+] Rewriting hostname and stopping $vm_build"
    # fix the hostname for rename. could use push for this.
    incus exec "$vm_build" -- hostnamectl set-hostname "$vm_name" || orcabort "hostname change failed"
    incus stop "$vm_build" || orcabort "incus stop failed"
)}

orca_cmd_template() {(
    orca_service_parse "$1"
    orca_cmd_build "$1"
    if orca_incus_exists "$vm_name"; then
        orca_log "[+] Deleting old $vm_name"
        incus delete --force "$vm_name"
    fi
    incus rename "${vm_name}-build" "$vm_name"
)}

orca_cmd_deploy() {(
    orca_service_parse "$1"
    local vm_build="${vm_name}-build"
    orca_log "[+] Building $vm_name"
    orca_cmd_build "$1" || orcabort "build failed"
    # stop and delete old box
    # TODO: rename old box instead of directly deleting it?
    if orca_incus_exists "$vm_name"; then
        orca_log "[+] Stopping $vm_name"
        incus stop "$vm_name" || true
        incus delete "$vm_name"
    fi
    orca_log "[+] Deploying $vm_build -> $vm_name"
    incus move "$vm_build" "$vm_name"
    incus config set "$vm_name" boot.autostart true
    incus config set "$vm_name" boot.autostart.priority 5
    incus config set "$vm_name" boot.autostart.delay 0
    if [[ "$(type -t service_deploy)" = function ]]; then
        orca_log "[+] Running $service deploy()"
        cd "$base/$svc"
        service_deploy "$vm_name" "$orca_suffix"
        cd "$base"
    fi
    orca_log "[+] Starting $vm_name"
    incus start "$vm_name"
)}

orca_cmd_refresh() {(
    orca_service_parse "$1"
    orca_push_bundle "$vm_name" "$svc" || orcabort "push-bundle failed"
    if [[ "$(type -t service_refresh)" = function ]]; then
        orca_log "[+] Running $svc refresh()"
        cd "$base/$svc"
        service_refresh "$vm_name" "$orca_suffix"
        cd "$base"
    else
        orca_log "[+] Restart $vm_name: stop"
        incus stop "$vm_name"

        orca_log "[+] Restart $vm_name: start"
        incus start "$vm_name"
    fi
)}

orca_cmd_shell() {(
    orca_service_parse "$1"
    incus exec "$vm_name" bash
)}

orca_cmd_subnet() {
    local old_subnet=$(incus network get orcabr0 ipv4.address | cut -d. -f1-3)
    local new_subnet=$(echo "$1" | cut -d. -f1-3)
    local containers=$(incus list -f compact -c n | tail -n+2 | awk '{print $1}' | egrep "^${ORCA_PREFIX}-")
    local old_prefix=$(incus network get orcabr0 ipv4.address)
    incus network set orcabr0 ipv4.address "$1"
    for vm_name in $containers; do
        local old_ip=$(incus config device get "$vm_name" eth0 ipv4.address)
        local ip_head=$(echo "$old_ip" | cut -d. -f1-3)
        local ip_tail=$(echo "$old_ip" | cut -d. -f4)
        local new_ip="${new_subnet}.${ip_tail}"
        if [[ -n "$old_ip" && "$old_subnet" = "$ip_head" ]]; then
            echo "[+] $vm_name: $old_ip -> $new_ip"
            incus stop "$vm_name"
            incus config device set "$vm_name" eth0 ipv4.address "$new_ip"
            incus start "$vm_name"
        fi
    done
}

orca_cmd_init() {
    # Process subnet argument
    orca_subnet="172.27.0.1/24"
    if [[ $# -gt 0 ]]; then
        orca_subnet="$1"
        # Validate input matches a.b.c.d/e
        if ! echo "$orca_subnet" | egrep '^([0-9]+\.){3}[0-9]+/[0-9]+$' &>/dev/null; then
            orcabort "SUBNET should be of form a.b.c.d/24"
        fi
    fi
    ORCA_INCUS_PRESEED="$(echo "$ORCA_INCUS_PRESEED" | sed "s,SUBNET,$orca_subnet,g")"
    echo "$ORCA_INCUS_PRESEED"

    if zfs list data &>/dev/null; then
        ORCA_INCUS_PRESEED="$ORCA_INCUS_PRESEED
storage_pools:
- name: data
  driver: zfs
  config:
    source: data/incus
"
    else
        ORCA_INCUS_PRESEED="$ORCA_INCUS_PRESEED
storage_pools:
- name: data
  driver: lvm
"
    fi
    echo "$ORCA_INCUS_PRESEED" | incus admin init --preseed
    echo 'orca() { ~/orca/orca "$@"; }
build() { orca build "$@"; }
shell() { orca shell "$@"; }
deploy() { orca deploy "$@"; }
refresh() { orca refresh "$@"; }' >> ~/.bashrc
}

## main function ##
if [[ $# = 1 ]]; then
    "orca_cmd_$1"
    exit
fi

# Allow init and subnet to take arbitrary args
if [[ $# -gt 0 ]] && [[ "$1" = init || "$1" = subnet ]]; then
    cmd="$1"
    shift 1
    "orca_cmd_$cmd" "$@"
    exit
fi


if [[ $# -lt 2 ]]; then
    orca_usage
    exit
fi

cmd="$1"
shift 1

if [[ "$(type -t "orca_cmd_$cmd")" != function ]]; then
    orca_usage
    orcabort "error: cmd not found: $cmd"
fi

# make sure all the services exist before doing anything
for service in "$@"; do
    service_prefix=$(echo "$service" | cut -d@ -f1)
    if [[ ! -d "service/$service_prefix" ]]; then
        orcabort "error: service/$service_prefix not found"
    fi
done
# run $cmd per service
for service in "$@"; do
    cd "$base"
    "orca_cmd_$cmd" "$service"
done
